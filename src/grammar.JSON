[
 {
  "translation_unit": [
   [
    "definitions"
   ]
  ]
 },
 {
  "package": [
   [
    "empty"
   ]
  ]
 },
 {
  "imports": [
   [
    "empty"
   ]
  ]
 },
 {
  "definitions": [
   [
    "definitions",
    "definition"
   ],
   [
    "definition"
   ]
  ]
 },
 {
  "definition": [
   [
    "type_definition"
   ],
   [
    "declaration"
   ]
  ]
 },
 {
  "type_definition": [
   [
    "sumType"
   ],
   [
    "product_type"
   ]
  ]
 },
 {
  "assign_op": [
   [
    "="
   ],
   [
    "*="
   ],
   [
    "+="
   ],
   [
    "-="
   ],
   [
    "&="
   ],
   [
    "/="
   ]
  ]
 },
 {
  "declaration": [
   [
    "fun_declaration"
   ],
   [
    "var_declaration"
   ]
  ]
 },
 {
  "fun_declaration": [
   [
    "let",
    "space_sep_ID",
    "=",
    "anonymous_function"
   ]
  ]
 },
 {
  "space_sep_ID": [
   [
    "space_sep_ID",
    "ID"
   ],
   [
    "ID"
   ]
  ]
 },
 {
  "var_declaration": [
   [
    "let",
    "space_sep_ID",
    "=",
    "expression",
    ";"
   ]
  ]
 },
 {
  "typeBarSeparated": [
   [
    "typeBarSeparated",
    "|",
    "TYPE"
   ],
   [
    "TYPE"
   ]
  ]
 },
 {
  "sumType": [
   [
    "type",
    "TYPE",
    "=",
    "typeBarSeparated",
    ";"
   ]
  ]
 },
 {
  "product_type": [
   [
    "type",
    "TYPE",
    "=",
    "{",
    "product_members",
    "}"
   ]
  ]
 },
 {
  "product_members": [
   [
    "product_members",
    ",",
    "product_member"
   ],
   [
    "product_member"
   ]
  ]
 },
 {
  "product_member": [
   [
    "TYPE",
    "space_sep_ID"
   ]
  ]
 },
 {
  "CONSTANT": [
   [
    "NUM"
   ],
   [
    "-",
    "NUM"
   ]
  ]
 },
 {
  "basic_expr": [
   [
    "ID"
   ],
   [
    "CONSTANT"
   ],
   [
    "(",
    "expression",
    ")"
   ],
   [
    "constructor"
   ],
   [
    "non"
   ]
  ]
 },
 {
  "constructor": [
   [
    "TYPE",
    "(",
    "arg_expr_list",
    ")"
   ]
  ]
 },
 {
  "anonymous_function": [
   [
    "params",
    "=>",
    "func_body"
   ]
  ]
 },
 {
  "params": [
   [
    "non"
   ],
   [
    "param_comma_sep"
   ]
  ]
 },
 {
  "param_comma_sep": [
   [
    "param_comma_sep",
    ",",
    "TYPE",
    "space_sep_ID"
   ],
   [
    "TYPE",
    "space_sep_ID"
   ]
  ]
 },
 {
  "func_body": [
   [
    "{",
    "statement_list",
    "final_stmt",
    "}"
   ]
  ]
 },
 {
  "final_stmt": [
   [
    "func_expr"
   ],
   [
    "guards"
   ]
  ]
 },
 {
  "guards": [
   [
    "clause_list",
    "final_clause"
   ]
  ]
 },
 {
  "clause_list": [
   [
    "clause_list",
    "clause"
   ],
   [
    "clause"
   ]
  ]
 },
 {
  "clause": [
   [
    "|",
    "expression",
    "=>",
    "expression"
   ]
  ]
 },
 {
  "final_clause": [
   [
    "|",
    "else",
    "=>",
    "expression"
   ]
  ]
 },
 {
  "post_expr": [
   [
    "basic_expr"
   ],
   [
    "post_expr",
    "[",
    "expression",
    "]"
   ],
   [
    "post_expr",
    "(",
    "arg_expr_list",
    ")"
   ],
   [
    "post_expr",
    ".",
    "ID"
   ]
  ]
 },
 {
  "arg_expr_list": [
   [
    "empty"
   ],
   [
    "assign_expr"
   ],
   [
    "arg_expr_list",
    ",",
    "assign_expr"
   ],
   [
    "func_expr"
   ]
  ]
 },
 {
  "unary_expr": [
   [
    "post_expr"
   ]
  ]
 },
 {
  "mult_expr": [
   [
    "unary_expr"
   ],
   [
    "mult_expr",
    "*",
    "unary_expr"
   ],
   [
    "mult_expr",
    "/",
    "unary_expr"
   ]
  ]
 },
 {
  "add_expr": [
   [
    "mult_expr"
   ],
   [
    "add_expr",
    "+",
    "mult_expr"
   ],
   [
    "add_expr",
    "-",
    "mult_expr"
   ]
  ]
 },
 {
  "shift_expr": [
   [
    "add_expr"
   ]
  ]
 },
 {
  "relation_expr": [
   [
    "shift_expr"
   ],
   [
    "relation_expr",
    "<",
    "shift_expr"
   ],
   [
    "relation_expr",
    ">",
    "shift_expr"
   ],
   [
    "relation_expr",
    ">=",
    "shift_expr"
   ],
   [
    "relation_expr",
    "<=",
    "shift_expr"
   ]
  ]
 },
 {
  "equal_expr": [
   [
    "relation_expr"
   ],
   [
    "equal_expr",
    "==",
    "relation_expr"
   ],
   [
    "equal_expr",
    "!=",
    "relation_expr"
   ]
  ]
 },
 {
  "bit_and_expr": [
   [
    "equal_expr"
   ]
  ]
 },
 {
  "bit_xor_expr": [
   [
    "bit_and_expr"
   ]
  ]
 },
 {
  "bit_or_expr": [
   [
    "bit_xor_expr"
   ]
  ]
 },
 {
  "logic_and_expr": [
   [
    "bit_or_expr"
   ],
   [
    "logic_and_expr",
    "^",
    "bit_or_expr"
   ]
  ]
 },
 {
  "logic_or_expr": [
   [
    "logic_and_expr"
   ],
   [
    "logic_or_expr",
    "v",
    "logic_and_expr"
   ]
  ]
 },
 {
  "assign_expr": [
   [
    "assign_expr",
    "=",
    "logic_or_expr"
   ],
   [
    "logic_or_expr"
   ]
  ]
 },
 {
  "expression": [
   [
    "expression",
    ",",
    "assign_expr"
   ],
   [
    "assign_expr"
   ]
  ]
 },
 {
  "func_expr": [
   [
    "anonymous_function"
   ],
   [
    "expression"
   ]
  ]
 },
 {
  "expression_stmt": [
   [
    "func_expr",
    ";"
   ]
  ]
 },
 {
  "statement": [
   [
    "expression_stmt"
   ]
  ]
 },
 {
  "statement_list": [
   [
    "statement_list",
    "statement"
   ],
   [
    "statement"
   ],
   [
    "empty"
   ]
  ]
 }
]